import { ControlBase, ControlName, MessageWrapper } from './base';
import { Button } from './button';
import { Checkbox } from './checkbox';
import { Group } from './group';
import { Paragraph } from './paragraph';
import { RadioGroup } from './radio-group';
import { Select } from './select';
import { Slider } from './slider';
import { TextInput } from './text_input';
import { ThumbnailList } from './thumbnail_list';
export { ControlName } from './base';
export { Slider } from './slider';
export { Button } from './button';
export { Group } from './group';
export { Select } from './select';
export { RadioGroup } from './radio-group';
export { TextInput } from './text_input';
export { Checkbox } from './checkbox';
export { Paragraph } from './paragraph';
export declare namespace ColorPicker {
    type Props = {
        id: string;
        label: string;
        color: string;
    };
    type Config = ControlBase<ControlName.COLOR_PICKER> & Props;
    type Message = {
        type: 'setColor';
        value: string;
    };
    const create: (props: Props) => Config;
}
export declare type ControlMessage = MessageWrapper<ControlName.PAGE, Page.Message> | MessageWrapper<ControlName.BUTTON, Button.Message> | MessageWrapper<ControlName.TEXT_INPUT, TextInput.Message> | MessageWrapper<ControlName.CHECKBOX, Checkbox.Message> | MessageWrapper<ControlName.COLOR_PICKER, ColorPicker.Message> | MessageWrapper<ControlName.SELECT, Select.Message> | MessageWrapper<ControlName.SLIDER, Slider.Message> | MessageWrapper<ControlName.RADIO_GROUP, RadioGroup.Message> | MessageWrapper<ControlName.THUMBNAIL_LIST, ThumbnailList.Message>;
export declare type SendMessageFn = (msg: ControlMessage) => void;
export declare type ControlConfig = Button.Config | TextInput.Config | Checkbox.Config | Paragraph.Config | ColorPicker.Config | Group.Config | Select.Config | Slider.Config | RadioGroup.Config | ThumbnailList.Config;
export declare namespace Page {
    type Props = {
        subpage: false;
        controls: ControlConfig[];
    } | {
        subpage: true;
        title?: string;
        actionLabel?: string;
        controls: ControlConfig[];
    };
    type Config = ControlBase<ControlName.PAGE> & Props;
    type Message = {
        type: 'back' | 'action';
    };
    /**
     * @param controls List of controls to show in the page
     * @param subpage (Optional) Whether the app receives the back button event
     * @param title (Optional) i18n'd title shown in subpage header
     * @param action (Optional) i18n'd action shown in subpage header
     */
    const create: ({ subpage, title, actionLabel, controls, }: {
        subpage?: boolean | undefined;
        title?: string | undefined;
        actionLabel?: string | undefined;
        controls: ControlConfig[];
    }) => Config;
}
