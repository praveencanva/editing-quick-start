import { BusComms, CanvaEditingExtensionHost, CanvaImage, ControlMessage, ImageId, Message, Preset, PresetId, Size } from '../';
export declare type HostBusOptions = {
    comms: BusComms<Message.FromHost, Message.FromClient>;
};
export declare class HostBus implements CanvaEditingExtensionHost.API {
    private readonly SAVE_TIMEOUT;
    private seq;
    private readonly comms;
    private readonly thumbnailOverrideHandler;
    private readonly controlsRenderHandler;
    private remoteProcessHandler?;
    private exitHandler?;
    private saveRequested;
    constructor({ comms }: HostBusOptions);
    sendInitMessage(options: Omit<Message.InitRequest, 'topic'>): Promise<void>;
    sendControlsEvent(msg: ControlMessage): void;
    sendViewportResize(size: Size, commit?: boolean): void;
    sendImageUpdate(image: CanvaImage): void;
    sendSaveRequest(): Promise<CanvaImage | ImageId>;
    onOverrideThumbnail(handler: CanvaEditingExtensionHost.OverrideThumbnailHandler): void;
    onUpdateControlPanel(handler: CanvaEditingExtensionHost.UpdateControlPanelHandler): void;
    onRemoteProcess(handler: CanvaEditingExtensionHost.RemoteProcessHandler): void;
    onExit(handler: CanvaEditingExtensionHost.ExitHandler): void;
    /**
     * Handle incoming messages from iframes belonging to the dev.
     */
    private readonly onReceiveMessage;
    sendPresetsRequest(image: CanvaImage, minDimensions: Size): Promise<Preset[]>;
    sendPresetSelected(presetId: PresetId): void;
    private handleStartRemoteProcess;
    handleExit(message: Message.Exit): void;
}
