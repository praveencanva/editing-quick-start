import { CanvaImage, ImageId } from './canva_image';
import { ControlMessage, Page } from './control_kit/control_kit';
import { PreviewOverlay } from './control_kit/preview_overlay';
import { ThumbnailId } from './control_kit/thumbnail_list';
export declare type PresetId = string & {
    __presetId: never;
};
export declare type Size = {
    width: number;
    height: number;
};
export declare type RemoteProcessInput = {
    image?: CanvaImage | ImageId;
    settings?: Map<string, string>;
};
export declare type RemoteProcessOutput = {
    image?: CanvaImage;
    imageId?: ImageId;
};
export declare type Preset = {
    id: string;
    label: string;
    image: CanvaImage;
};
export declare namespace Message {
    type Handler<S extends FromAny, R extends FromAny> = (msg: S) => Promise<R | void> | void;
    const enum Topic {
        WAKE_UP = "wake_up",
        INIT_REQUEST = "init_request",
        INIT_RESPONSE = "init_response",
        PRESETS_REQUEST = "presets_request",
        PRESETS_RESPONSE = "presets_response",
        PRESET_SELECTED = "preset_selected",
        CONTROLS_RENDER = "controls_render",
        CONTROLS_EVENT = "controls_event",
        THUMBNAIL_OVERRIDE = "thumbnail_override",
        IMAGE_UPDATE = "image_update",
        VIEWPORT_RESIZE = "viewport_resize",
        SAVE_REQUEST = "save_request",
        SAVE_RESPONSE = "save_response",
        START_REMOTE_PROCESS = "start_remote_process",
        REMOTE_PROCESS_STARTED = "remote_process_started",
        REMOTE_PROCESS_PROGRESS = "remote_process_progress",
        REMOTE_PROCESS_COMPLETE = "remote_process_complete",
        EXIT = "exit"
    }
    type WakeUp = {
        topic: Topic.WAKE_UP;
    };
    type InitRequest = {
        topic: Topic.INIT_REQUEST;
        previewSize: Size;
        localizedLabels: {
            [key: string]: string;
        };
        canvaLabels: {
            [key: string]: string;
        };
        assets: {
            [key: string]: string;
        };
        image?: CanvaImage;
        imageId?: ImageId;
    };
    type InitResponse = {
        topic: Topic.INIT_RESPONSE;
        error?: true;
    };
    type PresetsRequest = {
        topic: Topic.PRESETS_REQUEST;
        minDimensions: Size;
        image: CanvaImage;
    };
    type PresetsResponse = {
        topic: Topic.PRESETS_RESPONSE;
        presets: Preset[];
    };
    type PresetSelected = {
        topic: Topic.PRESET_SELECTED;
        presetId: PresetId;
    };
    type ControlsRender = {
        topic: Topic.CONTROLS_RENDER;
        controls?: Page.Config;
        overlay?: PreviewOverlay.Config;
    };
    type ControlsEvent = {
        topic: Topic.CONTROLS_EVENT;
        message: ControlMessage;
    };
    type ImageUpdate = {
        topic: Topic.IMAGE_UPDATE;
        image: CanvaImage;
    };
    type ViewportResize = {
        topic: Topic.VIEWPORT_RESIZE;
        commit?: boolean;
        size: Size;
    };
    type SaveRequest = {
        topic: Topic.SAVE_REQUEST;
    };
    type SaveResponse = {
        topic: Topic.SAVE_RESPONSE;
        image: CanvaImage | ImageId;
    };
    type ThumbnailOverride = {
        topic: Topic.THUMBNAIL_OVERRIDE;
        thumbnailId: ThumbnailId;
        thumbnail: CanvaImage;
    };
    type StartRemoteProcess = {
        topic: Topic.START_REMOTE_PROCESS;
        processId: number;
        input: RemoteProcessInput;
    };
    type RemoteProcessStarted = {
        topic: Topic.REMOTE_PROCESS_STARTED;
        processId: number;
        inputImageId: ImageId;
    };
    type RemoteProcessProgress = {
        topic: Topic.REMOTE_PROCESS_PROGRESS;
        processId: number;
        label: string;
        done?: number;
        total?: number;
    };
    type RemoteProcessComplete = {
        topic: Topic.REMOTE_PROCESS_COMPLETE;
        processId: number;
        result?: RemoteProcessOutput;
        error?: string;
    };
    type Exit = {
        topic: Topic.EXIT;
        image: CanvaImage | ImageId;
    };
    type FromClient = InitResponse | ControlsRender | PresetsResponse | SaveResponse | ThumbnailOverride | StartRemoteProcess | Exit;
    type FromHost = InitRequest | ControlsEvent | PresetsRequest | PresetSelected | ImageUpdate | ViewportResize | SaveRequest | RemoteProcessStarted | RemoteProcessProgress | RemoteProcessComplete;
    type FromAny = FromClient | FromHost;
}
export declare namespace EditingExtensionClient {
    type ReadyHandler = (opts: {
        previewSize: Size;
        /** Dictionary of translations provided by the app developer */
        localizedLabels: {
            [key: string]: string;
        };
        /** Dictionary of translations provided by Canva */
        canvaLabels: {
            [key: string]: string;
        };
        /** Dictionary of assets provided by the app developer */
        assets: {
            [key: string]: string;
        };
        image?: CanvaImage;
        imageId?: ImageId;
    }) => void | Promise<void>;
    type ControlsEventHandler = (message: ControlMessage) => void;
    type PresetsRequestHandler = (opts: {
        image: CanvaImage;
        minDimensions: Size;
    }) => Promise<Preset[]> | Preset[];
    type PresetSelectedHandler = (opts: {
        presetId: PresetId;
    }) => void;
    type SaveRequestHandler = () => Promise<CanvaImage | ImageId> | CanvaImage | ImageId;
    type ImageUpdateHandler = (image: CanvaImage) => void;
    type ViewportResizeHandler = (size: Size, commit?: boolean) => void;
    type RemoteProcessIdHandler = (imageId: ImageId) => void;
    type RemoteProcessProgressHandler = (label: string, done?: number, total?: number) => void;
    interface API {
        onReady(handler: ReadyHandler): void;
        /**
         * Called by the app when it wants to override a
         * thumbnail of the ThumbnailList component
         */
        overrideThumbnail(thumbnailId: ThumbnailId, thumbnail: CanvaImage): void;
        /**
         * Sent by the app when it wants to update the
         * controls visible in the app control panel
         * (the Canva contextual panel) or the overlay
         * on top of the preview.
         * TODO Decouple config from the messaging API
         */
        updateControlPanel(controls?: Page.Config, overlay?: PreviewOverlay.Config): void;
        /**
         * Called when the user interacts with a control in the app
         * control panel.
         * TODO Decouple config from the messaging API
         */
        onControlsEvent(handler: ControlsEventHandler): void;
        /**
         * Called when Canva wants to know which presets the app
         * provides.
         */
        onPresetsRequest(handler: PresetsRequestHandler): void;
        /**
         * Called when Canva wants the app to activate a specific preset
         */
        onPresetSelected(handler: PresetSelectedHandler): void;
        /**
         * Called when Canva has requested the edited image data
         * from the app, in order to save the image. For example,
         * when the user is happy with the image edits and clicks “Done”.
         */
        onSaveRequest(handler: SaveRequestHandler): void;
        /**
         * Called by Canva when it wants the app to use an updated image.
         * The app should preview effects based on the new image,
         * which replaces the image first given in `onReady`
         */
        onImageUpdate(handler: ImageUpdateHandler): void;
        /**
         * Called when the iframe size is changed, for example if
         * the image is resized while the app is open, or the
         * document zoom level changes.
         */
        onViewportResize(handler: ViewportResizeHandler): void;
        /**
         * Called by the app when it wants to process an image
         * using this App's server component.
         */
        remoteProcess(input: RemoteProcessInput, progressHandler?: RemoteProcessProgressHandler, idHandler?: RemoteProcessIdHandler): Promise<RemoteProcessOutput>;
        /**
         * Called by the app when it is done and wants to exit, once
         * this is called, then no handlers supplied by the app should be
         * called.
         */
        exit(image: ImageId | CanvaImage): void;
    }
}
export declare namespace CanvaEditingExtensionHost {
    type OverrideThumbnailHandler = (thumbnailId: ThumbnailId, image: CanvaImage) => void;
    type UpdateControlPanelHandler = (seq: number, controls?: Page.Config, overlay?: PreviewOverlay.Config) => void;
    type RemoteProcessProgressHandler = (label: string, done?: number, total?: number) => void;
    type RemoteProcessHandler = (input: RemoteProcessInput, progressHandler: RemoteProcessProgressHandler) => {
        inputImageId: Promise<ImageId>;
        result: Promise<RemoteProcessOutput>;
    };
    type ExitHandler = (image: ImageId | CanvaImage) => void;
    interface API {
        /**
         * Updates preset thumbnail with a provided image
         */
        onOverrideThumbnail(handler: CanvaEditingExtensionHost.OverrideThumbnailHandler): void;
        /**
         * Update the controls shown in the control panel beside the canvas
         * TODO Decouple config from the messaging API
         */
        onUpdateControlPanel(handler: CanvaEditingExtensionHost.UpdateControlPanelHandler): void;
        /**
         * Handles user interaction events in the control panel beside the canvas
         * TODO Decouple config from the messaging API
         */
        sendControlsEvent(message: ControlMessage): void;
        /**
         * Register a Save handler
         * This will be invoked when the user presses the 'save' button.
         *
         * The handler MUST call `sendSaveResponse` in response
         */
        sendSaveRequest(): Promise<CanvaImage | ImageId>;
        /**
         * Tells the app to use a new image
         */
        sendImageUpdate(image: CanvaImage): void;
        /**
         * Handles viewport dimensions update
         */
        sendViewportResize(size: Size, commit?: boolean): void;
        /**
         * Register a handler to perform remote processing.
         */
        onRemoteProcess(handler: CanvaEditingExtensionHost.RemoteProcessHandler): void;
        /**
         * Register a handler for when the app wants to exit
         */
        onExit(handler: CanvaEditingExtensionHost.ExitHandler): void;
    }
}
